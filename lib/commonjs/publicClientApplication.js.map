{"version":3,"sources":["publicClientApplication.ts"],"names":["promptTypeToString","promptType","MSALPromptType","SELECT_ACCOUNT","LOGIN","CONSENT","WHEN_REQUIRED","PublicClientApplication","constructor","config","init","_pca","MSALPublicClientApplication","acquireToken","params","notInitializedError","paramsWithoutPromptType","accessToken","account","expiresOn","idToken","idTokenClaims","scopes","tenantId","acquireTokenPopup","prompt","identifier","homeAccountId","environment","username","claims","getTime","acquireTokenSilent","localAccountId","getAccounts","accounts","getAllAccounts","Promise","resolve","map","a","getAccount","accountIdentifier","getAccountByHomeId","reject","removeAccount","logout","signOut","Error"],"mappings":"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","sourcesContent":["import { PublicClientApplication as MSALPublicClientApplication } from '@azure/msal-browser';\nimport type {\n  MSALConfiguration,\n  MSALInteractiveParams,\n  MSALSilentParams,\n  MSALAccount,\n  MSALSignoutParams,\n  MSALResult,\n  IPublicClientApplication,\n} from './types';\nimport { MSALPromptType } from './types';\n\ntype PromptTypeString = 'consent' | 'login' | 'select_account' | 'none';\n\nfunction promptTypeToString(promptType: MSALPromptType): PromptTypeString {\n  switch (promptType) {\n    case MSALPromptType.SELECT_ACCOUNT:\n      return 'select_account';\n    case MSALPromptType.LOGIN:\n      return 'login';\n    case MSALPromptType.CONSENT:\n      return 'consent';\n    case MSALPromptType.WHEN_REQUIRED:\n      return 'none';\n  }\n}\n\nexport default class PublicClientApplication implements IPublicClientApplication {\n  private static readonly notInitializedError = Error('PublicClientApplication instance not initialized.');\n  private _pca?: MSALPublicClientApplication;\n\n  constructor(private readonly config: MSALConfiguration, init = true) {\n    if (init) this.init();\n  }\n\n  public async init() {\n    this._pca = new MSALPublicClientApplication(this.config);\n  }\n\n  /**\n   * Acquire a token interactively\n   * @param {MSALInteractiveParams} params\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  public async acquireToken(params: MSALInteractiveParams): Promise<MSALResult> {\n    if (!this._pca) throw PublicClientApplication.notInitializedError;\n    const { promptType, ...paramsWithoutPromptType } = params;\n    const {\n      accessToken,\n      account,\n      expiresOn,\n      idToken,\n      idTokenClaims,\n      scopes,\n      tenantId,\n    } = await this._pca.acquireTokenPopup(\n      promptType ? { ...paramsWithoutPromptType, prompt: promptTypeToString(promptType) } : paramsWithoutPromptType\n    );\n    return {\n      accessToken,\n      account: {\n        identifier: account!.homeAccountId,\n        environment: account!.environment,\n        tenantId: account!.tenantId,\n        username: account!.username,\n        claims: idTokenClaims,\n      },\n      expiresOn: expiresOn?.getTime()!,\n      idToken,\n      scopes,\n      tenantId,\n    };\n  }\n\n  /**\n   * Acquire a token silently\n   * @param {MSALSilentParams} params - Includes the account identifer retrieved from a\n   * previous interactive login\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  public async acquireTokenSilent(params: MSALSilentParams): Promise<MSALResult> {\n    if (!this._pca) throw PublicClientApplication.notInitializedError;\n    const {\n      accessToken,\n      account,\n      expiresOn,\n      idToken,\n      idTokenClaims,\n      scopes,\n      tenantId,\n    } = await this._pca.acquireTokenSilent({\n      ...params,\n      account: {\n        ...params.account,\n        homeAccountId: params.account.identifier,\n        environment: params.account.environment ?? '',\n        localAccountId: '',\n      },\n    });\n    return {\n      accessToken,\n      account: {\n        identifier: account?.homeAccountId!,\n        environment: account?.environment,\n        tenantId: account?.tenantId!,\n        username: account?.username!,\n        claims: idTokenClaims,\n      },\n      expiresOn: expiresOn?.getTime()!,\n      idToken,\n      scopes,\n      tenantId,\n    };\n  }\n\n  /**\n   * Get all accounts for which this application has refresh tokens\n   * @return Promise containing array of MSALAccount objects for which this application has refresh tokens.\n   */\n  public getAccounts(): Promise<MSALAccount[]> {\n    if (!this._pca) throw PublicClientApplication.notInitializedError;\n    const accounts = this._pca.getAllAccounts();\n    return Promise.resolve(\n      accounts.map((a) => {\n        const { homeAccountId: identifier, environment, tenantId, username } = a;\n        return { identifier, environment, tenantId, username };\n      })\n    );\n  }\n\n  /** Retrieve the account matching the identifier\n   * @return Promise containing MSALAccount object\n   */\n  public getAccount(accountIdentifier: string): Promise<MSALAccount> {\n    if (!this._pca) throw PublicClientApplication.notInitializedError;\n    const account = this._pca.getAccountByHomeId(accountIdentifier);\n    if (account == null) {\n      return Promise.reject('Account not found');\n    } else {\n      const { homeAccountId: identifier, environment, tenantId, username } = account;\n      return Promise.resolve({ identifier, environment, tenantId, username });\n    }\n  }\n\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALAccount} account\n   * @return A promise containing a boolean = true if account removal was successful\n   * otherwise rejects\n   */\n  public async removeAccount(account: MSALAccount): Promise<boolean> {\n    if (!this._pca) throw PublicClientApplication.notInitializedError;\n    await this._pca.logout({\n      account: {\n        ...account,\n        homeAccountId: account.identifier,\n        environment: account.environment ?? '',\n        localAccountId: '',\n      },\n    });\n    return true;\n  }\n\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALSignoutParams} params\n   * @return A promise which resolves if sign out is successful,\n   * otherwise rejects\n   */\n  public signOut(params: MSALSignoutParams): Promise<boolean> {\n    return this.removeAccount(params.account);\n  }\n}\n"]}