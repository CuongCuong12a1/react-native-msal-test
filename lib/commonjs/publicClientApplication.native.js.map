{"version":3,"sources":["publicClientApplication.native.ts"],"names":["PublicClientApplication","constructor","config","init","isInitialized","RNMSAL","createPublicClientApplication","acquireToken","params","throwIfNotInitialized","acquireTokenSilent","getAccounts","getAccount","accountIdentifier","removeAccount","account","signOut","Platform","OS","signout","Error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAWe,MAAMA,uBAAN,CAAkE;AAG/EC,EAAAA,WAAW,CAAkBC,MAAlB,EAA6CC,IAAI,GAAG,IAApD,EAA0D;AAAA,SAAxCD,MAAwC,GAAxCA,MAAwC;;AAAA,2CAF7C,KAE6C;;AACnE,QAAIC,IAAJ,EAAU,KAAKA,IAAL;AACX;;AAED,QAAaA,IAAb,GAAoB;AAClB,QAAI,CAAC,KAAKC,aAAV,EAAyB;AACvB,YAAMC,sBAAOC,6BAAP,CAAqC,KAAKJ,MAA1C,CAAN;AACA,WAAKE,aAAL,GAAqB,IAArB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACSG,EAAAA,YAAP,CAAoBC,MAApB,EAAwE;AACtE,SAAKC,qBAAL;AACA,WAAOJ,sBAAOE,YAAP,CAAoBC,MAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACSE,EAAAA,kBAAP,CAA0BF,MAA1B,EAAyE;AACvE,SAAKC,qBAAL;AACA,WAAOJ,sBAAOK,kBAAP,CAA0BF,MAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACSG,EAAAA,WAAP,GAA6C;AAC3C,SAAKF,qBAAL;AACA,WAAOJ,sBAAOM,WAAP,EAAP;AACD;AAED;AACF;AACA;;;AACSC,EAAAA,UAAP,CAAkBC,iBAAlB,EAAmE;AACjE,SAAKJ,qBAAL;AACA,WAAOJ,sBAAOO,UAAP,CAAkBC,iBAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACSC,EAAAA,aAAP,CAAqBC,OAArB,EAA6D;AAC3D,SAAKN,qBAAL;AACA,WAAOJ,sBAAOS,aAAP,CAAqBC,OAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACSC,EAAAA,OAAP,CAAeR,MAAf,EAA4D;AAC1D,SAAKC,qBAAL;AACA,WAAOQ,sBAASC,EAAT,KAAgB,KAAhB,GAAwBb,sBAAOc,OAAP,CAAeX,MAAf,CAAxB,GAAiD,KAAKM,aAAL,CAAmBN,MAAM,CAACO,OAA1B,CAAxD;AACD;;AAEON,EAAAA,qBAAR,GAAgC;AAC9B,QAAI,CAAC,KAAKL,aAAV,EAAyB;AACvB,YAAMgB,KAAK,CAAC,mDAAD,CAAX;AACD;AACF;;AApF8E","sourcesContent":["import { Platform } from 'react-native';\nimport RNMSAL from './nativeModule';\nimport type {\n  MSALConfiguration,\n  MSALInteractiveParams,\n  MSALSilentParams,\n  MSALAccount,\n  MSALSignoutParams,\n  MSALResult,\n  IPublicClientApplication,\n} from './types';\n\nexport default class PublicClientApplication implements IPublicClientApplication {\n  private isInitialized = false;\n\n  constructor(private readonly config: MSALConfiguration, init = true) {\n    if (init) this.init();\n  }\n\n  public async init() {\n    if (!this.isInitialized) {\n      await RNMSAL.createPublicClientApplication(this.config);\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Acquire a token interactively\n   * @param {MSALInteractiveParams} params\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  public acquireToken(params: MSALInteractiveParams): Promise<MSALResult> {\n    this.throwIfNotInitialized();\n    return RNMSAL.acquireToken(params);\n  }\n\n  /**\n   * Acquire a token silently\n   * @param {MSALSilentParams} params - Includes the account identifer retrieved from a\n   * previous interactive login\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  public acquireTokenSilent(params: MSALSilentParams): Promise<MSALResult> {\n    this.throwIfNotInitialized();\n    return RNMSAL.acquireTokenSilent(params);\n  }\n\n  /**\n   * Get all accounts for which this application has refresh tokens\n   * @return Promise containing array of MSALAccount objects for which this application has refresh tokens.\n   */\n  public getAccounts(): Promise<MSALAccount[]> {\n    this.throwIfNotInitialized();\n    return RNMSAL.getAccounts();\n  }\n\n  /** Retrieve the account matching the identifier\n   * @return Promise containing MSALAccount object\n   */\n  public getAccount(accountIdentifier: string): Promise<MSALAccount> {\n    this.throwIfNotInitialized();\n    return RNMSAL.getAccount(accountIdentifier);\n  }\n\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALAccount} account\n   * @return A promise containing a boolean = true if account removal was successful\n   * otherwise rejects\n   */\n  public removeAccount(account: MSALAccount): Promise<boolean> {\n    this.throwIfNotInitialized();\n    return RNMSAL.removeAccount(account);\n  }\n\n  /**\n   * NOTE: iOS only. On Android this is the same as `removeAccount`\n   * Removes all tokens from the cache for this application for the provided\n   * account. Additionally, this will remove the account from the system browser.\n   * @param {MSALSignoutParams} params\n   * @return A promise which resolves if sign out is successful,\n   * otherwise rejects\n   * @platform ios\n   */\n  public signOut(params: MSALSignoutParams): Promise<boolean> {\n    this.throwIfNotInitialized();\n    return Platform.OS === 'ios' ? RNMSAL.signout(params) : this.removeAccount(params.account);\n  }\n\n  private throwIfNotInitialized() {\n    if (!this.isInitialized) {\n      throw Error('PublicClientApplication instance not initialized.');\n    }\n  }\n}\n"]}